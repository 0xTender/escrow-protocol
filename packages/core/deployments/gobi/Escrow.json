{
  "address": "0x7c60eD34D3d00B8D87Bcc4b889e298cD2721cfd0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IEscrowExtension",
          "name": "escrowExtension",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "EscrowExtensionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "escrowId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Escrow.EscrowState",
          "name": "escrowState",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "contract IEscrowExtension",
          "name": "escrowExtension",
          "type": "address"
        }
      ],
      "name": "EscrowStateUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEscrowExtension",
          "name": "escrowExtension",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "beginEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "escrowId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "cancelEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "escrowId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "completeEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEscrowExtension",
          "name": "",
          "type": "address"
        }
      ],
      "name": "escrowExtensions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "escrowId",
          "type": "uint256"
        }
      ],
      "name": "escrowState",
      "outputs": [
        {
          "internalType": "enum Escrow.EscrowState",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEscrowExtension",
          "name": "escrowExtension",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "updateEscrowExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7b6db45592b77f34aa00dd555b609450271324ba69664d48b81cbfe297afea1",
  "receipt": {
    "to": null,
    "from": "0x963C564c5B503eba38aD4c46DF2560EcdA0DA038",
    "contractAddress": "0x7c60eD34D3d00B8D87Bcc4b889e298cD2721cfd0",
    "transactionIndex": 0,
    "gasUsed": "1614713",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000800000000000000000001000000000000000000100000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000040000000000000000000000000000000000000001000",
    "blockHash": "0x35e8f9ad32e30ad674fc20569cc30ddf610bed906362f37f37fc00dc79c86764",
    "transactionHash": "0xf7b6db45592b77f34aa00dd555b609450271324ba69664d48b81cbfe297afea1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 368638,
        "transactionHash": "0xf7b6db45592b77f34aa00dd555b609450271324ba69664d48b81cbfe297afea1",
        "address": "0x7c60eD34D3d00B8D87Bcc4b889e298cD2721cfd0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000963c564c5b503eba38ad4c46df2560ecda0da038"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x35e8f9ad32e30ad674fc20569cc30ddf610bed906362f37f37fc00dc79c86764"
      }
    ],
    "blockNumber": 368638,
    "cumulativeGasUsed": "1614713",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "738f68d8aa4f59d404c90e18f89c9438",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IEscrowExtension\",\"name\":\"escrowExtension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EscrowExtensionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"escrowId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Escrow.EscrowState\",\"name\":\"escrowState\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"contract IEscrowExtension\",\"name\":\"escrowExtension\",\"type\":\"address\"}],\"name\":\"EscrowStateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IEscrowExtension\",\"name\":\"escrowExtension\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"beginEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"escrowId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"cancelEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"escrowId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"completeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEscrowExtension\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"escrowExtensions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"escrowState\",\"outputs\":[{\"internalType\":\"enum Escrow.EscrowState\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEscrowExtension\",\"name\":\"escrowExtension\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateEscrowExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"beginEscrow(address,bytes)\":{\"params\":{\"data\":\"data to be passed to the escrow extension\",\"escrowExtension\":\"address of the escrow extension\"}},\"cancelEscrow(uint256,bytes)\":{\"params\":{\"data\":\"data to be passed to the escrow extension\",\"escrowId\":\"id of the escrow\"}},\"completeEscrow(uint256,bytes)\":{\"params\":{\"data\":\"data to be passed to the escrow extension\",\"escrowId\":\"id of the escrow\"}},\"escrowState(uint256)\":{\"params\":{\"escrowId\":\"id of the escrow\"},\"returns\":{\"_0\":\"state of the escrow\",\"_1\":\"address of the escrow extension\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateEscrowExtension(address,bool)\":{\"params\":{\"enabled\":\"if the extension is enabled or not\",\"escrowExtension\":\"address of the escrow extension\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Escrow.sol\":\"Escrow\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IEscrowExtension.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ncontract Escrow is Ownable {\\n    using Counters for Counters.Counter;\\n    mapping(IEscrowExtension => bool) public escrowExtensions;\\n\\n    Counters.Counter private _escrowIdTracker;\\n    mapping(uint256 => EscrowState) private _escrowStates;\\n    mapping(uint256 => IEscrowExtension) private _escrowExtensionFromId;\\n\\n    enum EscrowState {\\n        NONE,\\n        BEGUN,\\n        COMPLETED,\\n        CANCELLED\\n    }\\n\\n    /**\\n     *\\n     * @param escrowId id of the escrow\\n     * @return state of the escrow\\n     * @return address of the escrow extension\\n     */\\n    function escrowState(\\n        uint256 escrowId\\n    ) public view returns (EscrowState, address) {\\n        return (\\n            _escrowStates[escrowId],\\n            address(_escrowExtensionFromId[escrowId])\\n        );\\n    }\\n\\n    /**\\n     *\\n     * @param escrowExtension address of the escrow extension\\n     * @param enabled if the extension is enabled or not\\n     */\\n    function updateEscrowExtension(\\n        IEscrowExtension escrowExtension,\\n        bool enabled\\n    ) external onlyOwner {\\n        require(\\n            address(escrowExtension) != address(0),\\n            \\\"Escrow: Escrow extension cannot be zero address\\\"\\n        );\\n        require(\\n            address(escrowExtension) != address(this),\\n            \\\"Escrow: Escrow extension cannot be same address as escrow\\\"\\n        );\\n        require(\\n            IERC165(address(escrowExtension)).supportsInterface(\\n                type(IEscrowExtension).interfaceId\\n            ),\\n            \\\"Escrow: Escrow extension does not support IEscrowExtension interface\\\"\\n        );\\n\\n        escrowExtensions[escrowExtension] = enabled;\\n        emit EscrowExtensionUpdated(escrowExtension, enabled);\\n    }\\n\\n    /**\\n     *\\n     * @param escrowExtension address of the escrow extension\\n     * @param data data to be passed to the escrow extension\\n     */\\n    function beginEscrow(\\n        IEscrowExtension escrowExtension,\\n        bytes calldata data\\n    ) public {\\n        // TODO: Reentracny guard\\n        require(\\n            escrowExtensions[escrowExtension],\\n            \\\"Escrow: Escrow extension not enabled\\\"\\n        );\\n\\n        _escrowIdTracker.increment();\\n        uint256 escrowId = _escrowIdTracker.current();\\n        _escrowStates[escrowId] = EscrowState.BEGUN;\\n        _escrowExtensionFromId[escrowId] = escrowExtension;\\n        (bool success, string memory errorString) = escrowExtension.begin(\\n            _msgSender(),\\n            escrowId,\\n            data\\n        );\\n        require(success, errorString);\\n        emit EscrowStateUpdate(\\n            _msgSender(),\\n            escrowId,\\n            EscrowState.BEGUN,\\n            escrowExtension\\n        );\\n    }\\n\\n    /**\\n     * @param escrowId id of the escrow\\n     * @param data data to be passed to the escrow extension\\n     */\\n    function cancelEscrow(uint256 escrowId, bytes calldata data) public {\\n        require(\\n            _escrowStates[escrowId] == EscrowState.BEGUN,\\n            \\\"Escrow: Escrow not in BEGUN state\\\"\\n        );\\n        require(\\n            _escrowExtensionFromId[escrowId] != IEscrowExtension(address(0)),\\n            \\\"Escrow: Escrow extension not set\\\"\\n        );\\n\\n        (bool success, string memory errorString) = _escrowExtensionFromId[\\n            escrowId\\n        ].cancel(_msgSender(), data);\\n\\n        require(success, errorString);\\n\\n        _escrowStates[escrowId] = EscrowState.CANCELLED;\\n\\n        emit EscrowStateUpdate(\\n            _msgSender(),\\n            escrowId,\\n            EscrowState.CANCELLED,\\n            _escrowExtensionFromId[escrowId]\\n        );\\n    }\\n\\n    /**\\n     * @param escrowId id of the escrow\\n     * @param data data to be passed to the escrow extension\\n     */\\n    function completeEscrow(uint256 escrowId, bytes calldata data) public {\\n        require(\\n            _escrowStates[escrowId] == EscrowState.BEGUN,\\n            \\\"Escrow: Escrow not in BEGUN state\\\"\\n        );\\n\\n        require(\\n            _escrowExtensionFromId[escrowId] != IEscrowExtension(address(0)),\\n            \\\"Escrow: Escrow extension not set\\\"\\n        );\\n\\n        (bool success, string memory errorString) = _escrowExtensionFromId[\\n            escrowId\\n        ].complete(_msgSender(), data);\\n\\n        require(success, errorString);\\n\\n        _escrowStates[escrowId] = EscrowState.COMPLETED;\\n\\n        emit EscrowStateUpdate(\\n            _msgSender(),\\n            escrowId,\\n            EscrowState.COMPLETED,\\n            _escrowExtensionFromId[escrowId]\\n        );\\n    }\\n\\n    event EscrowExtensionUpdated(\\n        IEscrowExtension indexed escrowExtension,\\n        bool indexed enabled\\n    );\\n\\n    event EscrowStateUpdate(\\n        address indexed sender,\\n        uint256 indexed escrowId,\\n        EscrowState escrowState,\\n        IEscrowExtension escrowExtension\\n    );\\n}\\n\",\"keccak256\":\"0xd88c5eb805acb61a27fb26f7c4af3ebe0ded922e27f3986e7595fc952bfb0d87\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrowExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IEscrowExtension {\\n    function begin(\\n        address sender,\\n        uint256 escrowId,\\n        bytes calldata data\\n    ) external returns (bool, string memory);\\n\\n    function cancel(\\n        address sender,\\n        bytes calldata data\\n    ) external returns (bool, string memory);\\n\\n    function complete(\\n        address sender,\\n        bytes calldata data\\n    ) external returns (bool, string memory);\\n}\\n\",\"keccak256\":\"0xdef4e5055408435bc5f703b83728183cbeec882622a0d123e1ea5a726117785b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611be58061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b1461011f578063c1ce75521461013d578063d913ddb214610159578063f2fde38b14610175578063f8efe3941461019157610093565b80632ea89b43146100985780633ffdfb4e146100b4578063715018a6146100e457806387e75b0c146100ee575b600080fd5b6100b260048036038101906100ad9190610fd9565b6101ad565b005b6100ce60048036038101906100c991906110a9565b6104af565b6040516100db91906110f1565b60405180910390f35b6100ec6104cf565b005b6101086004803603810190610103919061110c565b6104e3565b6040516101169291906111bf565b60405180910390f35b610127610544565b60405161013491906111e8565b60405180910390f35b61015760048036038101906101529190611203565b61056d565b005b610173600480360381019061016e9190610fd9565b6107d9565b005b61018f600480360381019061018a919061128f565b610ada565b005b6101ab60048036038101906101a691906112e8565b610b5d565b005b600160038111156101c1576101c0611139565b5b6003600085815260200190815260200160002060009054906101000a900460ff1660038111156101f4576101f3611139565b5b14610234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022b906113ab565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166004600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036102d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cd90611417565b60405180910390fd5b6000806004600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aab53d74610330610dbc565b86866040518463ffffffff1660e01b815260040161035093929190611495565b6000604051808303816000875af115801561036f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103989190611627565b915091508181906103df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d691906116c7565b60405180910390fd5b5060026003600087815260200190815260200160002060006101000a81548160ff0219169083600381111561041757610416611139565b5b021790555084610425610dbc565b73ffffffffffffffffffffffffffffffffffffffff167ff1c58eb120759c9a0731a7eb6031896ec8e8cccdb714bbb87d896332ae596e496002600460008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516104a0929190611748565b60405180910390a35050505050565b60016020528060005260406000206000915054906101000a900460ff1681565b6104d7610dc4565b6104e16000610e42565b565b6000806003600084815260200190815260200160002060009054906101000a900460ff166004600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691509150915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f0906117e3565b60405180910390fd5b6106036002610f06565b600061060f6002610f1c565b905060016003600083815260200190815260200160002060006101000a81548160ff0219169083600381111561064857610647611139565b5b0217905550836004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000808573ffffffffffffffffffffffffffffffffffffffff166313cd09216106c6610dbc565b8588886040518563ffffffff1660e01b81526004016106e89493929190611812565b6000604051808303816000875af1158015610707573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107309190611627565b91509150818190610777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076e91906116c7565b60405180910390fd5b5082610781610dbc565b73ffffffffffffffffffffffffffffffffffffffff167ff1c58eb120759c9a0731a7eb6031896ec8e8cccdb714bbb87d896332ae596e496001896040516107c9929190611748565b60405180910390a3505050505050565b600160038111156107ed576107ec611139565b5b6003600085815260200190815260200160002060009054906101000a900460ff1660038111156108205761081f611139565b5b14610860576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610857906113ab565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166004600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990611417565b60405180910390fd5b6000806004600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f7d85e861095c610dbc565b86866040518463ffffffff1660e01b815260040161097c93929190611495565b6000604051808303816000875af115801561099b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109c49190611627565b91509150818190610a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0291906116c7565b60405180910390fd5b50600380600087815260200190815260200160002060006101000a81548160ff02191690836003811115610a4257610a41611139565b5b021790555084610a50610dbc565b73ffffffffffffffffffffffffffffffffffffffff167ff1c58eb120759c9a0731a7eb6031896ec8e8cccdb714bbb87d896332ae596e496003600460008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610acb929190611748565b60405180910390a35050505050565b610ae2610dc4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b48906118c4565b60405180910390fd5b610b5a81610e42565b50565b610b65610dc4565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611956565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c39906119e8565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166301ffc9a77ff605b1bd000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610c9b9190611a43565b602060405180830381865afa158015610cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdc9190611a5e565b610d1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1290611b23565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508015158273ffffffffffffffffffffffffffffffffffffffff167fee12763144c60d055aa33f037d3d37faa84d51a96007e04252b974c211a3266660405160405180910390a35050565b600033905090565b610dcc610dbc565b73ffffffffffffffffffffffffffffffffffffffff16610dea610544565b73ffffffffffffffffffffffffffffffffffffffff1614610e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3790611b8f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610f5181610f3e565b8114610f5c57600080fd5b50565b600081359050610f6e81610f48565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610f9957610f98610f74565b5b8235905067ffffffffffffffff811115610fb657610fb5610f79565b5b602083019150836001820283011115610fd257610fd1610f7e565b5b9250929050565b600080600060408486031215610ff257610ff1610f34565b5b600061100086828701610f5f565b935050602084013567ffffffffffffffff81111561102157611020610f39565b5b61102d86828701610f83565b92509250509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061106482611039565b9050919050565b600061107682611059565b9050919050565b6110868161106b565b811461109157600080fd5b50565b6000813590506110a38161107d565b92915050565b6000602082840312156110bf576110be610f34565b5b60006110cd84828501611094565b91505092915050565b60008115159050919050565b6110eb816110d6565b82525050565b600060208201905061110660008301846110e2565b92915050565b60006020828403121561112257611121610f34565b5b600061113084828501610f5f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061117957611178611139565b5b50565b600081905061118a82611168565b919050565b600061119a8261117c565b9050919050565b6111aa8161118f565b82525050565b6111b981611059565b82525050565b60006040820190506111d460008301856111a1565b6111e160208301846111b0565b9392505050565b60006020820190506111fd60008301846111b0565b92915050565b60008060006040848603121561121c5761121b610f34565b5b600061122a86828701611094565b935050602084013567ffffffffffffffff81111561124b5761124a610f39565b5b61125786828701610f83565b92509250509250925092565b61126c81611059565b811461127757600080fd5b50565b60008135905061128981611263565b92915050565b6000602082840312156112a5576112a4610f34565b5b60006112b38482850161127a565b91505092915050565b6112c5816110d6565b81146112d057600080fd5b50565b6000813590506112e2816112bc565b92915050565b600080604083850312156112ff576112fe610f34565b5b600061130d85828601611094565b925050602061131e858286016112d3565b9150509250929050565b600082825260208201905092915050565b7f457363726f773a20457363726f77206e6f7420696e20424547554e207374617460008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000611395602183611328565b91506113a082611339565b604082019050919050565b600060208201905081810360008301526113c481611388565b9050919050565b7f457363726f773a20457363726f7720657874656e73696f6e206e6f7420736574600082015250565b6000611401602083611328565b915061140c826113cb565b602082019050919050565b60006020820190508181036000830152611430816113f4565b9050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006114748385611437565b9350611481838584611448565b61148a83611457565b840190509392505050565b60006040820190506114aa60008301866111b0565b81810360208301526114bd818486611468565b9050949350505050565b6000815190506114d6816112bc565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61151982611457565b810181811067ffffffffffffffff82111715611538576115376114e1565b5b80604052505050565b600061154b610f2a565b90506115578282611510565b919050565b600067ffffffffffffffff821115611577576115766114e1565b5b61158082611457565b9050602081019050919050565b60005b838110156115ab578082015181840152602081019050611590565b60008484015250505050565b60006115ca6115c58461155c565b611541565b9050828152602081018484840111156115e6576115e56114dc565b5b6115f184828561158d565b509392505050565b600082601f83011261160e5761160d610f74565b5b815161161e8482602086016115b7565b91505092915050565b6000806040838503121561163e5761163d610f34565b5b600061164c858286016114c7565b925050602083015167ffffffffffffffff81111561166d5761166c610f39565b5b611679858286016115f9565b9150509250929050565b600081519050919050565b600061169982611683565b6116a38185611328565b93506116b381856020860161158d565b6116bc81611457565b840191505092915050565b600060208201905081810360008301526116e1818461168e565b905092915050565b6000819050919050565b600061170e61170961170484611039565b6116e9565b611039565b9050919050565b6000611720826116f3565b9050919050565b600061173282611715565b9050919050565b61174281611727565b82525050565b600060408201905061175d60008301856111a1565b61176a6020830184611739565b9392505050565b7f457363726f773a20457363726f7720657874656e73696f6e206e6f7420656e6160008201527f626c656400000000000000000000000000000000000000000000000000000000602082015250565b60006117cd602483611328565b91506117d882611771565b604082019050919050565b600060208201905081810360008301526117fc816117c0565b9050919050565b61180c81610f3e565b82525050565b600060608201905061182760008301876111b0565b6118346020830186611803565b8181036040830152611847818486611468565b905095945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006118ae602683611328565b91506118b982611852565b604082019050919050565b600060208201905081810360008301526118dd816118a1565b9050919050565b7f457363726f773a20457363726f7720657874656e73696f6e2063616e6e6f742060008201527f6265207a65726f20616464726573730000000000000000000000000000000000602082015250565b6000611940602f83611328565b915061194b826118e4565b604082019050919050565b6000602082019050818103600083015261196f81611933565b9050919050565b7f457363726f773a20457363726f7720657874656e73696f6e2063616e6e6f742060008201527f62652073616d65206164647265737320617320657363726f7700000000000000602082015250565b60006119d2603983611328565b91506119dd82611976565b604082019050919050565b60006020820190508181036000830152611a01816119c5565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a3d81611a08565b82525050565b6000602082019050611a586000830184611a34565b92915050565b600060208284031215611a7457611a73610f34565b5b6000611a82848285016114c7565b91505092915050565b7f457363726f773a20457363726f7720657874656e73696f6e20646f6573206e6f60008201527f7420737570706f72742049457363726f77457874656e73696f6e20696e74657260208201527f6661636500000000000000000000000000000000000000000000000000000000604082015250565b6000611b0d604483611328565b9150611b1882611a8b565b606082019050919050565b60006020820190508181036000830152611b3c81611b00565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611b79602083611328565b9150611b8482611b43565b602082019050919050565b60006020820190508181036000830152611ba881611b6c565b905091905056fea2646970667358221220810a9e792384767f4bd0b201ae7f8389b3c31c73e1d35756b46b43e0150879da64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b1461011f578063c1ce75521461013d578063d913ddb214610159578063f2fde38b14610175578063f8efe3941461019157610093565b80632ea89b43146100985780633ffdfb4e146100b4578063715018a6146100e457806387e75b0c146100ee575b600080fd5b6100b260048036038101906100ad9190610fd9565b6101ad565b005b6100ce60048036038101906100c991906110a9565b6104af565b6040516100db91906110f1565b60405180910390f35b6100ec6104cf565b005b6101086004803603810190610103919061110c565b6104e3565b6040516101169291906111bf565b60405180910390f35b610127610544565b60405161013491906111e8565b60405180910390f35b61015760048036038101906101529190611203565b61056d565b005b610173600480360381019061016e9190610fd9565b6107d9565b005b61018f600480360381019061018a919061128f565b610ada565b005b6101ab60048036038101906101a691906112e8565b610b5d565b005b600160038111156101c1576101c0611139565b5b6003600085815260200190815260200160002060009054906101000a900460ff1660038111156101f4576101f3611139565b5b14610234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022b906113ab565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166004600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036102d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cd90611417565b60405180910390fd5b6000806004600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aab53d74610330610dbc565b86866040518463ffffffff1660e01b815260040161035093929190611495565b6000604051808303816000875af115801561036f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103989190611627565b915091508181906103df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d691906116c7565b60405180910390fd5b5060026003600087815260200190815260200160002060006101000a81548160ff0219169083600381111561041757610416611139565b5b021790555084610425610dbc565b73ffffffffffffffffffffffffffffffffffffffff167ff1c58eb120759c9a0731a7eb6031896ec8e8cccdb714bbb87d896332ae596e496002600460008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516104a0929190611748565b60405180910390a35050505050565b60016020528060005260406000206000915054906101000a900460ff1681565b6104d7610dc4565b6104e16000610e42565b565b6000806003600084815260200190815260200160002060009054906101000a900460ff166004600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691509150915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f0906117e3565b60405180910390fd5b6106036002610f06565b600061060f6002610f1c565b905060016003600083815260200190815260200160002060006101000a81548160ff0219169083600381111561064857610647611139565b5b0217905550836004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000808573ffffffffffffffffffffffffffffffffffffffff166313cd09216106c6610dbc565b8588886040518563ffffffff1660e01b81526004016106e89493929190611812565b6000604051808303816000875af1158015610707573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107309190611627565b91509150818190610777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076e91906116c7565b60405180910390fd5b5082610781610dbc565b73ffffffffffffffffffffffffffffffffffffffff167ff1c58eb120759c9a0731a7eb6031896ec8e8cccdb714bbb87d896332ae596e496001896040516107c9929190611748565b60405180910390a3505050505050565b600160038111156107ed576107ec611139565b5b6003600085815260200190815260200160002060009054906101000a900460ff1660038111156108205761081f611139565b5b14610860576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610857906113ab565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166004600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990611417565b60405180910390fd5b6000806004600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f7d85e861095c610dbc565b86866040518463ffffffff1660e01b815260040161097c93929190611495565b6000604051808303816000875af115801561099b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109c49190611627565b91509150818190610a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0291906116c7565b60405180910390fd5b50600380600087815260200190815260200160002060006101000a81548160ff02191690836003811115610a4257610a41611139565b5b021790555084610a50610dbc565b73ffffffffffffffffffffffffffffffffffffffff167ff1c58eb120759c9a0731a7eb6031896ec8e8cccdb714bbb87d896332ae596e496003600460008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610acb929190611748565b60405180910390a35050505050565b610ae2610dc4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b48906118c4565b60405180910390fd5b610b5a81610e42565b50565b610b65610dc4565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611956565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c39906119e8565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166301ffc9a77ff605b1bd000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610c9b9190611a43565b602060405180830381865afa158015610cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdc9190611a5e565b610d1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1290611b23565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508015158273ffffffffffffffffffffffffffffffffffffffff167fee12763144c60d055aa33f037d3d37faa84d51a96007e04252b974c211a3266660405160405180910390a35050565b600033905090565b610dcc610dbc565b73ffffffffffffffffffffffffffffffffffffffff16610dea610544565b73ffffffffffffffffffffffffffffffffffffffff1614610e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3790611b8f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610f5181610f3e565b8114610f5c57600080fd5b50565b600081359050610f6e81610f48565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610f9957610f98610f74565b5b8235905067ffffffffffffffff811115610fb657610fb5610f79565b5b602083019150836001820283011115610fd257610fd1610f7e565b5b9250929050565b600080600060408486031215610ff257610ff1610f34565b5b600061100086828701610f5f565b935050602084013567ffffffffffffffff81111561102157611020610f39565b5b61102d86828701610f83565b92509250509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061106482611039565b9050919050565b600061107682611059565b9050919050565b6110868161106b565b811461109157600080fd5b50565b6000813590506110a38161107d565b92915050565b6000602082840312156110bf576110be610f34565b5b60006110cd84828501611094565b91505092915050565b60008115159050919050565b6110eb816110d6565b82525050565b600060208201905061110660008301846110e2565b92915050565b60006020828403121561112257611121610f34565b5b600061113084828501610f5f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061117957611178611139565b5b50565b600081905061118a82611168565b919050565b600061119a8261117c565b9050919050565b6111aa8161118f565b82525050565b6111b981611059565b82525050565b60006040820190506111d460008301856111a1565b6111e160208301846111b0565b9392505050565b60006020820190506111fd60008301846111b0565b92915050565b60008060006040848603121561121c5761121b610f34565b5b600061122a86828701611094565b935050602084013567ffffffffffffffff81111561124b5761124a610f39565b5b61125786828701610f83565b92509250509250925092565b61126c81611059565b811461127757600080fd5b50565b60008135905061128981611263565b92915050565b6000602082840312156112a5576112a4610f34565b5b60006112b38482850161127a565b91505092915050565b6112c5816110d6565b81146112d057600080fd5b50565b6000813590506112e2816112bc565b92915050565b600080604083850312156112ff576112fe610f34565b5b600061130d85828601611094565b925050602061131e858286016112d3565b9150509250929050565b600082825260208201905092915050565b7f457363726f773a20457363726f77206e6f7420696e20424547554e207374617460008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000611395602183611328565b91506113a082611339565b604082019050919050565b600060208201905081810360008301526113c481611388565b9050919050565b7f457363726f773a20457363726f7720657874656e73696f6e206e6f7420736574600082015250565b6000611401602083611328565b915061140c826113cb565b602082019050919050565b60006020820190508181036000830152611430816113f4565b9050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006114748385611437565b9350611481838584611448565b61148a83611457565b840190509392505050565b60006040820190506114aa60008301866111b0565b81810360208301526114bd818486611468565b9050949350505050565b6000815190506114d6816112bc565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61151982611457565b810181811067ffffffffffffffff82111715611538576115376114e1565b5b80604052505050565b600061154b610f2a565b90506115578282611510565b919050565b600067ffffffffffffffff821115611577576115766114e1565b5b61158082611457565b9050602081019050919050565b60005b838110156115ab578082015181840152602081019050611590565b60008484015250505050565b60006115ca6115c58461155c565b611541565b9050828152602081018484840111156115e6576115e56114dc565b5b6115f184828561158d565b509392505050565b600082601f83011261160e5761160d610f74565b5b815161161e8482602086016115b7565b91505092915050565b6000806040838503121561163e5761163d610f34565b5b600061164c858286016114c7565b925050602083015167ffffffffffffffff81111561166d5761166c610f39565b5b611679858286016115f9565b9150509250929050565b600081519050919050565b600061169982611683565b6116a38185611328565b93506116b381856020860161158d565b6116bc81611457565b840191505092915050565b600060208201905081810360008301526116e1818461168e565b905092915050565b6000819050919050565b600061170e61170961170484611039565b6116e9565b611039565b9050919050565b6000611720826116f3565b9050919050565b600061173282611715565b9050919050565b61174281611727565b82525050565b600060408201905061175d60008301856111a1565b61176a6020830184611739565b9392505050565b7f457363726f773a20457363726f7720657874656e73696f6e206e6f7420656e6160008201527f626c656400000000000000000000000000000000000000000000000000000000602082015250565b60006117cd602483611328565b91506117d882611771565b604082019050919050565b600060208201905081810360008301526117fc816117c0565b9050919050565b61180c81610f3e565b82525050565b600060608201905061182760008301876111b0565b6118346020830186611803565b8181036040830152611847818486611468565b905095945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006118ae602683611328565b91506118b982611852565b604082019050919050565b600060208201905081810360008301526118dd816118a1565b9050919050565b7f457363726f773a20457363726f7720657874656e73696f6e2063616e6e6f742060008201527f6265207a65726f20616464726573730000000000000000000000000000000000602082015250565b6000611940602f83611328565b915061194b826118e4565b604082019050919050565b6000602082019050818103600083015261196f81611933565b9050919050565b7f457363726f773a20457363726f7720657874656e73696f6e2063616e6e6f742060008201527f62652073616d65206164647265737320617320657363726f7700000000000000602082015250565b60006119d2603983611328565b91506119dd82611976565b604082019050919050565b60006020820190508181036000830152611a01816119c5565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a3d81611a08565b82525050565b6000602082019050611a586000830184611a34565b92915050565b600060208284031215611a7457611a73610f34565b5b6000611a82848285016114c7565b91505092915050565b7f457363726f773a20457363726f7720657874656e73696f6e20646f6573206e6f60008201527f7420737570706f72742049457363726f77457874656e73696f6e20696e74657260208201527f6661636500000000000000000000000000000000000000000000000000000000604082015250565b6000611b0d604483611328565b9150611b1882611a8b565b606082019050919050565b60006020820190508181036000830152611b3c81611b00565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611b79602083611328565b9150611b8482611b43565b602082019050919050565b60006020820190508181036000830152611ba881611b6c565b905091905056fea2646970667358221220810a9e792384767f4bd0b201ae7f8389b3c31c73e1d35756b46b43e0150879da64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "beginEscrow(address,bytes)": {
        "params": {
          "data": "data to be passed to the escrow extension",
          "escrowExtension": "address of the escrow extension"
        }
      },
      "cancelEscrow(uint256,bytes)": {
        "params": {
          "data": "data to be passed to the escrow extension",
          "escrowId": "id of the escrow"
        }
      },
      "completeEscrow(uint256,bytes)": {
        "params": {
          "data": "data to be passed to the escrow extension",
          "escrowId": "id of the escrow"
        }
      },
      "escrowState(uint256)": {
        "params": {
          "escrowId": "id of the escrow"
        },
        "returns": {
          "_0": "state of the escrow",
          "_1": "address of the escrow extension"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateEscrowExtension(address,bool)": {
        "params": {
          "enabled": "if the extension is enabled or not",
          "escrowExtension": "address of the escrow extension"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1748,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "escrowExtensions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IEscrowExtension)4355,t_bool)"
      },
      {
        "astId": 1751,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_escrowIdTracker",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)1550_storage"
      },
      {
        "astId": 1756,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_escrowStates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_enum(EscrowState)1766)"
      },
      {
        "astId": 1761,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_escrowExtensionFromId",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_contract(IEscrowExtension)4355)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IEscrowExtension)4355": {
        "encoding": "inplace",
        "label": "contract IEscrowExtension",
        "numberOfBytes": "20"
      },
      "t_enum(EscrowState)1766": {
        "encoding": "inplace",
        "label": "enum Escrow.EscrowState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_contract(IEscrowExtension)4355,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IEscrowExtension)4355",
        "label": "mapping(contract IEscrowExtension => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_contract(IEscrowExtension)4355)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IEscrowExtension)",
        "numberOfBytes": "32",
        "value": "t_contract(IEscrowExtension)4355"
      },
      "t_mapping(t_uint256,t_enum(EscrowState)1766)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum Escrow.EscrowState)",
        "numberOfBytes": "32",
        "value": "t_enum(EscrowState)1766"
      },
      "t_struct(Counter)1550_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1549,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
