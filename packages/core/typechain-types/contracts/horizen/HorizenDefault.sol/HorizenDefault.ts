/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace HorizenDefault {
  export type InstanceStruct = {
    id: PromiseOrValue<BigNumberish>;
    initiator: PromiseOrValue<string>;
    initiatorERC20: PromiseOrValue<string>;
    initiatorAmount: PromiseOrValue<BigNumberish>;
    counterParty: PromiseOrValue<string>;
    counterPartyERC20: PromiseOrValue<string>;
    counterPartyAmount: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
  };

  export type InstanceStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    number
  ] & {
    id: BigNumber;
    initiator: string;
    initiatorERC20: string;
    initiatorAmount: BigNumber;
    counterParty: string;
    counterPartyERC20: string;
    counterPartyAmount: BigNumber;
    state: number;
  };
}

export interface HorizenDefaultInterface extends utils.Interface {
  functions: {
    "addERC20Support(address)": FunctionFragment;
    "begin(address,uint256,address,uint256,address)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "changeNoOwnerFeeERC20(address,bool)": FunctionFragment;
    "complete(uint256)": FunctionFragment;
    "counterPartyInstances(address,uint256)": FunctionFragment;
    "erc20s(uint256)": FunctionFragment;
    "findInstances(address)": FunctionFragment;
    "getSupportedErc20s()": FunctionFragment;
    "initiatorInstances(address,uint256)": FunctionFragment;
    "noOwnerFeeERC20s(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerFeeAddress()": FunctionFragment;
    "ownerFeePermille()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOwnerFeeAddress(address)": FunctionFragment;
    "setOwnerFeePermille(uint256)": FunctionFragment;
    "supportedErc20s(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addERC20Support"
      | "begin"
      | "cancel"
      | "changeNoOwnerFeeERC20"
      | "complete"
      | "counterPartyInstances"
      | "erc20s"
      | "findInstances"
      | "getSupportedErc20s"
      | "initiatorInstances"
      | "noOwnerFeeERC20s"
      | "owner"
      | "ownerFeeAddress"
      | "ownerFeePermille"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "setOwnerFeeAddress"
      | "setOwnerFeePermille"
      | "supportedErc20s"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addERC20Support",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "begin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeNoOwnerFeeERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "complete",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "counterPartyInstances",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20s",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "findInstances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedErc20s",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiatorInstances",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "noOwnerFeeERC20s",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerFeeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerFeePermille",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnerFeeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnerFeePermille",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedErc20s",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addERC20Support",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "begin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeNoOwnerFeeERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "complete", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "counterPartyInstances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20s", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findInstances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedErc20s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiatorInstances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noOwnerFeeERC20s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerFeePermille",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnerFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnerFeePermille",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedErc20s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Begun(uint256,address,address)": EventFragment;
    "Cancelled(uint256)": EventFragment;
    "Finished(uint256)": EventFragment;
    "NoOwnerFeeERC20Changed(address,bool)": EventFragment;
    "OwnerFeeAddressChanged(address)": EventFragment;
    "OwnerFeePermilleChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Begun"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NoOwnerFeeERC20Changed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerFeeAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerFeePermilleChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface BegunEventObject {
  id: BigNumber;
  initiator: string;
  counterParty: string;
}
export type BegunEvent = TypedEvent<
  [BigNumber, string, string],
  BegunEventObject
>;

export type BegunEventFilter = TypedEventFilter<BegunEvent>;

export interface CancelledEventObject {
  id: BigNumber;
}
export type CancelledEvent = TypedEvent<[BigNumber], CancelledEventObject>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface FinishedEventObject {
  id: BigNumber;
}
export type FinishedEvent = TypedEvent<[BigNumber], FinishedEventObject>;

export type FinishedEventFilter = TypedEventFilter<FinishedEvent>;

export interface NoOwnerFeeERC20ChangedEventObject {
  _token: string;
  _newValue: boolean;
}
export type NoOwnerFeeERC20ChangedEvent = TypedEvent<
  [string, boolean],
  NoOwnerFeeERC20ChangedEventObject
>;

export type NoOwnerFeeERC20ChangedEventFilter =
  TypedEventFilter<NoOwnerFeeERC20ChangedEvent>;

export interface OwnerFeeAddressChangedEventObject {
  _address: string;
}
export type OwnerFeeAddressChangedEvent = TypedEvent<
  [string],
  OwnerFeeAddressChangedEventObject
>;

export type OwnerFeeAddressChangedEventFilter =
  TypedEventFilter<OwnerFeeAddressChangedEvent>;

export interface OwnerFeePermilleChangedEventObject {
  _feePermille: BigNumber;
}
export type OwnerFeePermilleChangedEvent = TypedEvent<
  [BigNumber],
  OwnerFeePermilleChangedEventObject
>;

export type OwnerFeePermilleChangedEventFilter =
  TypedEventFilter<OwnerFeePermilleChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface HorizenDefault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HorizenDefaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addERC20Support(
      _erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    begin(
      initiatorERC20: PromiseOrValue<string>,
      initiatorAmount: PromiseOrValue<BigNumberish>,
      counterPartyERC20: PromiseOrValue<string>,
      counterPartyAmount: PromiseOrValue<BigNumberish>,
      counterParty: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeNoOwnerFeeERC20(
      _token: PromiseOrValue<string>,
      _newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    complete(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    counterPartyInstances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        number
      ] & {
        id: BigNumber;
        initiator: string;
        initiatorERC20: string;
        initiatorAmount: BigNumber;
        counterParty: string;
        counterPartyERC20: string;
        counterPartyAmount: BigNumber;
        state: number;
      }
    >;

    erc20s(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    findInstances(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[HorizenDefault.InstanceStructOutput[]]>;

    getSupportedErc20s(overrides?: CallOverrides): Promise<[string[]]>;

    initiatorInstances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        number
      ] & {
        id: BigNumber;
        initiator: string;
        initiatorERC20: string;
        initiatorAmount: BigNumber;
        counterParty: string;
        counterPartyERC20: string;
        counterPartyAmount: BigNumber;
        state: number;
      }
    >;

    noOwnerFeeERC20s(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerFeeAddress(overrides?: CallOverrides): Promise<[string]>;

    ownerFeePermille(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwnerFeeAddress(
      _ownerFeeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwnerFeePermille(
      _ownerFeePermille: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportedErc20s(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addERC20Support(
    _erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  begin(
    initiatorERC20: PromiseOrValue<string>,
    initiatorAmount: PromiseOrValue<BigNumberish>,
    counterPartyERC20: PromiseOrValue<string>,
    counterPartyAmount: PromiseOrValue<BigNumberish>,
    counterParty: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeNoOwnerFeeERC20(
    _token: PromiseOrValue<string>,
    _newValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  complete(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  counterPartyInstances(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      number
    ] & {
      id: BigNumber;
      initiator: string;
      initiatorERC20: string;
      initiatorAmount: BigNumber;
      counterParty: string;
      counterPartyERC20: string;
      counterPartyAmount: BigNumber;
      state: number;
    }
  >;

  erc20s(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  findInstances(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<HorizenDefault.InstanceStructOutput[]>;

  getSupportedErc20s(overrides?: CallOverrides): Promise<string[]>;

  initiatorInstances(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      number
    ] & {
      id: BigNumber;
      initiator: string;
      initiatorERC20: string;
      initiatorAmount: BigNumber;
      counterParty: string;
      counterPartyERC20: string;
      counterPartyAmount: BigNumber;
      state: number;
    }
  >;

  noOwnerFeeERC20s(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerFeeAddress(overrides?: CallOverrides): Promise<string>;

  ownerFeePermille(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwnerFeeAddress(
    _ownerFeeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwnerFeePermille(
    _ownerFeePermille: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportedErc20s(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addERC20Support(
      _erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    begin(
      initiatorERC20: PromiseOrValue<string>,
      initiatorAmount: PromiseOrValue<BigNumberish>,
      counterPartyERC20: PromiseOrValue<string>,
      counterPartyAmount: PromiseOrValue<BigNumberish>,
      counterParty: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeNoOwnerFeeERC20(
      _token: PromiseOrValue<string>,
      _newValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    complete(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    counterPartyInstances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        number
      ] & {
        id: BigNumber;
        initiator: string;
        initiatorERC20: string;
        initiatorAmount: BigNumber;
        counterParty: string;
        counterPartyERC20: string;
        counterPartyAmount: BigNumber;
        state: number;
      }
    >;

    erc20s(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    findInstances(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<HorizenDefault.InstanceStructOutput[]>;

    getSupportedErc20s(overrides?: CallOverrides): Promise<string[]>;

    initiatorInstances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        number
      ] & {
        id: BigNumber;
        initiator: string;
        initiatorERC20: string;
        initiatorAmount: BigNumber;
        counterParty: string;
        counterPartyERC20: string;
        counterPartyAmount: BigNumber;
        state: number;
      }
    >;

    noOwnerFeeERC20s(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerFeeAddress(overrides?: CallOverrides): Promise<string>;

    ownerFeePermille(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setOwnerFeeAddress(
      _ownerFeeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwnerFeePermille(
      _ownerFeePermille: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedErc20s(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Begun(uint256,address,address)"(
      id?: PromiseOrValue<BigNumberish> | null,
      initiator?: PromiseOrValue<string> | null,
      counterParty?: PromiseOrValue<string> | null
    ): BegunEventFilter;
    Begun(
      id?: PromiseOrValue<BigNumberish> | null,
      initiator?: PromiseOrValue<string> | null,
      counterParty?: PromiseOrValue<string> | null
    ): BegunEventFilter;

    "Cancelled(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): CancelledEventFilter;
    Cancelled(id?: PromiseOrValue<BigNumberish> | null): CancelledEventFilter;

    "Finished(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): FinishedEventFilter;
    Finished(id?: PromiseOrValue<BigNumberish> | null): FinishedEventFilter;

    "NoOwnerFeeERC20Changed(address,bool)"(
      _token?: PromiseOrValue<string> | null,
      _newValue?: PromiseOrValue<boolean> | null
    ): NoOwnerFeeERC20ChangedEventFilter;
    NoOwnerFeeERC20Changed(
      _token?: PromiseOrValue<string> | null,
      _newValue?: PromiseOrValue<boolean> | null
    ): NoOwnerFeeERC20ChangedEventFilter;

    "OwnerFeeAddressChanged(address)"(
      _address?: PromiseOrValue<string> | null
    ): OwnerFeeAddressChangedEventFilter;
    OwnerFeeAddressChanged(
      _address?: PromiseOrValue<string> | null
    ): OwnerFeeAddressChangedEventFilter;

    "OwnerFeePermilleChanged(uint256)"(
      _feePermille?: PromiseOrValue<BigNumberish> | null
    ): OwnerFeePermilleChangedEventFilter;
    OwnerFeePermilleChanged(
      _feePermille?: PromiseOrValue<BigNumberish> | null
    ): OwnerFeePermilleChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addERC20Support(
      _erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    begin(
      initiatorERC20: PromiseOrValue<string>,
      initiatorAmount: PromiseOrValue<BigNumberish>,
      counterPartyERC20: PromiseOrValue<string>,
      counterPartyAmount: PromiseOrValue<BigNumberish>,
      counterParty: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeNoOwnerFeeERC20(
      _token: PromiseOrValue<string>,
      _newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    complete(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    counterPartyInstances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc20s(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findInstances(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedErc20s(overrides?: CallOverrides): Promise<BigNumber>;

    initiatorInstances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    noOwnerFeeERC20s(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerFeeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    ownerFeePermille(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwnerFeeAddress(
      _ownerFeeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwnerFeePermille(
      _ownerFeePermille: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportedErc20s(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addERC20Support(
      _erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    begin(
      initiatorERC20: PromiseOrValue<string>,
      initiatorAmount: PromiseOrValue<BigNumberish>,
      counterPartyERC20: PromiseOrValue<string>,
      counterPartyAmount: PromiseOrValue<BigNumberish>,
      counterParty: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeNoOwnerFeeERC20(
      _token: PromiseOrValue<string>,
      _newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    complete(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    counterPartyInstances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20s(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findInstances(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedErc20s(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiatorInstances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    noOwnerFeeERC20s(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerFeeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerFeePermille(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwnerFeeAddress(
      _ownerFeeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwnerFeePermille(
      _ownerFeePermille: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportedErc20s(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
