generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Contract_pm {
  id Int @id @default(autoincrement())

  name String

  address         String
  chainId         Int
  transactionHash String

  abiPath String

  initBlock        Int
  indexedTillBlock Int

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Event_pm  Event_pm[]
}

model Event_pm {
  id          String      @id
  Contract_pm Contract_pm @relation(fields: [ContractId], references: [id])
  ContractId  Int

  block           Int
  transactionHash String
  logIndex        Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  E_EscrowExtensionUpdated_Escrow E_EscrowExtensionUpdated_Escrow[]

  E_EscrowStateUpdate_Escrow E_EscrowStateUpdate_Escrow[]

  E_OwnershipTransferred_Escrow E_OwnershipTransferred_Escrow[]

  E_EscrowAddressUpdated_SwapERC20Extension E_EscrowAddressUpdated_SwapERC20Extension[]

  E_OwnershipTransferred_SwapERC20Extension E_OwnershipTransferred_SwapERC20Extension[]

  E_SwapStateChanged_SwapERC20Extension E_SwapStateChanged_SwapERC20Extension[]

  E_Approval_Tether E_Approval_Tether[]

  E_Transfer_Tether E_Transfer_Tether[]

  E_Approval_WrappedEther E_Approval_WrappedEther[]

  E_Transfer_WrappedEther E_Transfer_WrappedEther[]
}

model E_EscrowExtensionUpdated_Escrow {
  id       Int      @id @default(autoincrement())
  Event_pm Event_pm @relation(fields: [eventId], references: [id])
  eventId  String   @unique

  A_escrowExtension String @db.VarChar(1000)

  A_enabled String @db.VarChar(1000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model E_EscrowStateUpdate_Escrow {
  id       Int      @id @default(autoincrement())
  Event_pm Event_pm @relation(fields: [eventId], references: [id])
  eventId  String   @unique

  A_sender String @db.VarChar(1000)

  A_escrowId String @db.VarChar(1000)

  A_escrowState String @db.VarChar(1000)

  A_escrowExtension String @db.VarChar(1000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model E_OwnershipTransferred_Escrow {
  id       Int      @id @default(autoincrement())
  Event_pm Event_pm @relation(fields: [eventId], references: [id])
  eventId  String   @unique

  A_previousOwner String @db.VarChar(1000)

  A_newOwner String @db.VarChar(1000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model E_EscrowAddressUpdated_SwapERC20Extension {
  id       Int      @id @default(autoincrement())
  Event_pm Event_pm @relation(fields: [eventId], references: [id])
  eventId  String   @unique

  A_escrowAddress String @db.VarChar(1000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model E_OwnershipTransferred_SwapERC20Extension {
  id       Int      @id @default(autoincrement())
  Event_pm Event_pm @relation(fields: [eventId], references: [id])
  eventId  String   @unique

  A_previousOwner String @db.VarChar(1000)

  A_newOwner String @db.VarChar(1000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model E_SwapStateChanged_SwapERC20Extension {
  id       Int      @id @default(autoincrement())
  Event_pm Event_pm @relation(fields: [eventId], references: [id])
  eventId  String   @unique

  A_escrowId String @db.VarChar(1000)

  A_initiator String @db.VarChar(1000)

  A_counter String @db.VarChar(1000)

  A_initiatorToken String @db.VarChar(1000)

  A_initiatorAmount String @db.VarChar(1000)

  A_counterToken String @db.VarChar(1000)

  A_counterAmount String @db.VarChar(1000)

  A_deadline String @db.VarChar(1000)

  A_state String @db.VarChar(1000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model E_Approval_Tether {
  id       Int      @id @default(autoincrement())
  Event_pm Event_pm @relation(fields: [eventId], references: [id])
  eventId  String   @unique

  A_owner String @db.VarChar(1000)

  A_spender String @db.VarChar(1000)

  A_value String @db.VarChar(1000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model E_Transfer_Tether {
  id       Int      @id @default(autoincrement())
  Event_pm Event_pm @relation(fields: [eventId], references: [id])
  eventId  String   @unique

  A_from String @db.VarChar(1000)

  A_to String @db.VarChar(1000)

  A_value String @db.VarChar(1000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model E_Approval_WrappedEther {
  id       Int      @id @default(autoincrement())
  Event_pm Event_pm @relation(fields: [eventId], references: [id])
  eventId  String   @unique

  A_owner String @db.VarChar(1000)

  A_spender String @db.VarChar(1000)

  A_value String @db.VarChar(1000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model E_Transfer_WrappedEther {
  id       Int      @id @default(autoincrement())
  Event_pm Event_pm @relation(fields: [eventId], references: [id])
  eventId  String   @unique

  A_from String @db.VarChar(1000)

  A_to String @db.VarChar(1000)

  A_value String @db.VarChar(1000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
